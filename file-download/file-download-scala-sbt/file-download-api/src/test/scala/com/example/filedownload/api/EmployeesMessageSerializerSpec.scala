package com.example.filedownload.api

import java.io.InputStream
import java.net.InetAddress

import akka.actor.ActorSystem
import akka.stream.ActorMaterializer
import akka.stream.scaladsl.StreamConverters
import akka.testkit.TestKit
import akka.util.ByteString
import org.scalatest.{ AsyncWordSpecLike, Matchers }

class EmployeesMessageSerializerSpec
  extends TestKit(ActorSystem("EmployeesMessageSerializerSpec"))
    with AsyncWordSpecLike
    with Matchers {

  private implicit val materializer: ActorMaterializer = ActorMaterializer()

  // Data generated by https://mockaroo.com/
  private val employeeData = List(
    Employee(1, "Alfonse", "Kem", "akem0@imgur.com", "Kanoodle", InetAddress.getByName("196.60.202.32")),
    Employee(2, "Laurent", "Shewring", "lshewring1@webeden.co.uk", "Jatri", InetAddress.getByName("214.173.69.116")),
    Employee(3, "Maire", "Halegarth", "mhalegarth2@umich.edu", "Jabberbean", InetAddress.getByName("44.129.195.166")),
    Employee(4, "Bard", "O'Hagerty", "bohagerty3@hc360.com", "Omba", InetAddress.getByName("206.240.181.157")),
    Employee(5, "Juliette", "Buessen", "jbuessen4@uol.com.br", "Brightbean", InetAddress.getByName("243.144.101.201")),
    Employee(6, "Isiahi", "Mowen", "imowen5@miibeian.gov.cn", "Abatz", InetAddress.getByName("6.24.205.48")),
    Employee(7, "Andreas", "Fenna", "afenna6@pen.io", "Photofeed", InetAddress.getByName("248.6.205.36")),
    Employee(8, "Ame", "Guyer", "aguyer7@cbc.ca", "Devcast", InetAddress.getByName("36.228.26.146")),
    Employee(9, "Sheri", "Pears", "spears8@barnesandnoble.com", "Divanoodle", InetAddress.getByName("214.99.111.152")),
    Employee(10, "Germaine", "Rabbe", "grabbe9@weather.com", "Leexo", InetAddress.getByName("31.220.77.51")),
  )

  private def loadEmployeeCSVDataResource(): InputStream = getClass.getResourceAsStream("/MOCK_DATA.csv")

  private val employeeCSVDataFuture =
    StreamConverters
      .fromInputStream(() => loadEmployeeCSVDataResource())
      .runFold(ByteString.empty)((accumulatedBytes, nextBytes) => accumulatedBytes ++ nextBytes)

  "CSVSerializer" should {
    "serialize employee data" in {
      val serializedEmployeeData = FileDownloadService.CSVSerializer.serialize(employeeData)
      employeeCSVDataFuture.map { employeeCSVData =>
        serializedEmployeeData.utf8String shouldEqual employeeCSVData.utf8String
      }
    }
  }

  "CSVDeserializer" should {
    "deserialize employee data" in {
      employeeCSVDataFuture.map { employeeCSVData =>
        val deserializedEmployeeData = FileDownloadService.CSVDeserializer.deserialize(employeeCSVData)
        deserializedEmployeeData shouldEqual employeeData
      }
    }
  }

}
